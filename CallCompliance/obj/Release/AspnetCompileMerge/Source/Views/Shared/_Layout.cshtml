<!DOCTYPE html>
<html>
<head>
    <!-- Required meta tags always come first -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/charts");
    <link rel="stylesheet" href="~/Content/site.css" />
    @Scripts.Render("~/bundles/modernizr")
</head>

<body>
<nav class="navbar navbar-dark navbar-fixed-top bg-primary">
    <div class="form-inline row">
        <div class="col-sm-9">
            @if (User.IsInRole("Call_Frequency_Users_SG") || User.IsInRole("Call_Frequency_Admins_SG")) {
                <span class="navbar-brand">Welcome to the Call Compliance Portal @MyHelpers.UserFullName()!</span>
            }
            else {
                <span class="navbar-brand">@MyHelpers.UserFullName(), Sorry but you don't have rights to use Call Compliance.</span>
            }
            <div class="input-group">
                <input type="text" class="form-control" id="phoneNumSearch" maxlength="12">
                <span class="input-group-addon">
                    <i class="fa fa-search" onclick="FindPhoneNumber()"></i>
                </span>
            </div>
        </div>
    </div>
</nav>

<div class="container-fluid">
    <div class="row">
        @if (User.IsInRole("Call_Frequency_Users_SG") || User.IsInRole("Call_Frequency_Admins_SG")) {
            <div class="col-sm-3 col-md-2 sidebar">
                <nav class="nav nav-pills nav-stacked nav-sidebar">
                    <a id="menu-home" class="nav-link" href="/Home">
                        <span style="width: 55px" class="fa fa-2x fa fa-home"></span> Home
                    </a>
                    <a id="menu-unblock" class="nav-link" href="/Unblock" data-toggle="popover" data-trigger="hover" data-container = "body" role="button" title="Exception Call Cap" data-content="Phone number needing temporary override.">
                        <span style="width: 55px" class="fa fa-2x fa-thumbs-up"></span>Exception Call Cap
                    </a>
                    <a id="menu-cooldown" class="nav-link" href="/CoolDown" data-toggle="popover" data-trigger="hover" data-container = "body" title="No Call Period" data-content="Places phone number on no call period of 24 hours.">
                        <span style="width: 55px" class="fa fa-2x fa-shower"></span> No Call Period
                    </a>
                    <a id="menu-dnc" class="nav-link" href="/DNC" data-toggle="popover" data-trigger="hover" data-container = "body" title="DNC" data-content="Add phone numbers to Global DNC list.">
                        <span style="width: 55px" class="fa fa-2x fa-user-times"></span> DNC
                    </a>
				@if (User.IsInRole("Call_Frequency_Admins_SG")) {
                    <a id="menu-whitelist" class="nav-link" href="/WhiteList" data-toggle="popover" data-trigger="hover" data-container = "body" title="White List" data-content="To ensure businesses do not reach maximum calls per day. An exception is for students who are currently on the global DNC list, who want to recieved calls from UMA. (See DNC Override checkbox)">
                        <span style="width: 55px" class="fa fa-2x fa-snowflake-o"></span> White List
                    </a>
				}
                    <a id="menu-reporting" class="nav-link" href="/Reporting" data-toggle="popover" data-trigger="hover" data-container = "body" title="Reporting" data-content="Runs SSRS reports for Call Compliance.">
                        <span style="width: 55px" class="fa fa-2x fa-file-text-o"></span> Reporting
                    </a>

                @if (User.IsInRole("Call_Frequency_Admins_SG")) {
                    <a id="menu-admin" class="nav-link" href="/Admin" data-toggle="popover" data-trigger="hover" data-container = "body" title="Admin" data-content="Modify daily dial caps and daily exception caps.">
                        <span style="width: 55px" class="fa fa-2x fa-user-circle-o"></span> Admin
                    </a>
                }
                </nav>

            </div>

            <div class="col-md-6 offset-md-3 main">
                @RenderBody()
            </div>
        }
    </div>
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/bootstrap")

@RenderSection("scripts", required: false)
</body>
</html>

<script>
    $(function () {
        $("[data-toggle='popover']").popover()
    });

    function FindPhoneNumber () {

        var url = '/Home/GetTableName/';
        var phoneNumber = $("#phoneNumSearch").val();

        if (phoneNumber.length == 0) {
            phoneNumber = $("#phoneNumSearchHome").val();
        }

        var jsonData = ko.toJSON({ "phoneNumber": phoneNumber });

        var result = postJSON(url, jsonData, false);

        if (result === null) {
            return;
        }

        if (result.length === 0) {
			modal({
				type: 'inverted',
				title: "Not Found",
				text: phoneNumber + " not found in any table.",
				size: 'normal',
				buttons: [
					{
						text: 'OK',
						val: 'ok',
						eKey: true,
						addClass: 'btn-light-blue'
					}
				]
			});

        } else if (result.length === 1) {
            var menu = result[0].TableName.toUpperCase();
            switch (menu) {
				case "COOLDOWN":
					
				$("#menu-home").removeClass("active");
				$("#menu-unblock").removeClass("active");
				$("#menu-dnc").removeClass("active");
				$("#menu-whitelist").removeClass("active");
				$("#menu-reporting").removeClass("active");
				$("#menu-admin").removeClass("active");

                $("#menu-cooldown").addClass("active");
                var url = "/CoolDown/";
                document.location.href = url;

                break;
            case "EXCEPTION":

					$("#menu-home").removeClass("active");
					$("#menu-cooldown").removeClass("active");
					$("#menu-dnc").removeClass("active");
					$("#menu-whitelist").removeClass("active");
					$("#menu-reporting").removeClass("active");
					$("#menu-admin").removeClass("active");

                    $("#menu-unblock").addClass("active");
                    var url = "/UnBlock/";
                    document.location.href = url;

                break;
            case "WHITELIST":

					$("#menu-home").removeClass("active");
					$("#menu-unblock").removeClass("active");
					$("#menu-cooldown").removeClass("active");
					$("#menu-dnc").removeClass("active");
					$("#menu-reporting").removeClass("active");
					$("#menu-admin").removeClass("active");

					$("#menu-whitelist").addClass("active");
                break;
            case "DNC":

					$("#menu-home").removeClass("active");
					$("#menu-unblock").removeClass("active");
					$("#menu-cooldown").removeClass("active");
					$("#menu-whitelist").removeClass("active");
					$("#menu-reporting").removeClass("active");
					$("#menu-admin").removeClass("active");

                    $("#menu-dnc").addClass("active");
                    var url = "/DNC/";
                    document.location.href = url;
                break;
            }
        } else {
            var menuItems = [];
            var maxItems = result.length;
            var buf = "";

            for (i = 0; i < 10 && i < maxItems; i++) {

                // If on the DNC you must have an Administrator use the White List with the DNC override
                @*if (!@User.IsInRole("Call_Frequency_Admins_SG") && User.IsInRole("Call_Frequency_Users_SG") && result[i].TableName.toUpperCase() == "DNC") {
                    buf = "Phone Number " + phoneNumber + " is in DNC list and you only have User privilages.  An administrator can use the White List and use the DNC override. \n";*@
                    menuItems.push(buf);
                    //} else {
                    menuItems.push("Phone Number " + phoneNumber + " found in table (" + result[i].TableName + ")</br>");
                    //  }
                }
            modal({
                type: 'inverted',
                title: "Phone Number found in multiple tables.",
                text: menuItems,
                size: 'normal',
                buttons: [
                    {
                        text: 'OK',
                        val: 'ok',
                        eKey: true,
                        addClass: 'btn-light-blue'
                    }
                ]
            });
        }
      
        //
        // this method is now allows you to do a post sync or async. 
        // the sync method works as it always did, just need to pass in
        // address, json and async set to true - false.
        // the async call requires the a callback method and 
        // showBusy set to true if you want to block the UI
        //
        function postJSON(address, json, async, asyncCallBackFn, showBusy) {
            var ajaxUrl = address;
            var args;
            var result;

            args = Array.prototype.slice.call(arguments, 5);

            if (async === null) {
                async = false;
            }
            if (async && asyncCallBackFn === null) {
                //throw new UserException('async method called with no callback method', '');
            }
            if (showBusy === null) {
                showBusy = false;
            }
            if (!async) {
                try {
                    $.ajax({
                        url: ajaxUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: json,
                        async: false,
                        contentType: 'application/json;charset=utf-8',
                        traditional: true,
                        success: function (data) {
                            result = data;
                        },
                        error: function (data) {
                            //alert('Json Post Error : ' + data);
                            result = data;
                            //throw new UserException('AjaxException', result);
                        }
                    }
                    );
                } catch (ex) {
                    //showDialog('error', 'An exception has occurred. ' + ex.exceptionName);
                    //alert('An exception has occurred. ' + ex.exceptionName);
                    //postException(ex.exceptionName);
                    return result;
                }
                //Need to check the success message here?
                return result;
            }
            else {
                try {
                    //uma.common.busy(showBusy);
                    $.ajax({
                        url: ajaxUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: json,
                        async: true,
                        contentType: 'application/json;charset=utf-8',
                        traditional: true,
                        success: function (data) {
                            //uma.common.busy(false);
                            args.splice(0, 0, data);
                            asyncCallBackFn.apply(this, args);
                        },
                        error: function (data) {
                           // uma.common.busy(false);
                            //alert('Json Post Error : ' + data);
                            result = data;
                            //throw new UserException('AsyncException', result);
                        }
                    }
                    );
                } catch (ex) {
                    //showDialog('error', 'An exception has occurred. ' + ex.exceptionName);
                    //alert('An exception has occurred. ' + ex.exceptionName);
                    //postException(ex.exceptionName);
                    return result;
                }
                //Need to check the success message here?
                return result;
            }
        }


    }
</script>